% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_trace.R
\name{plot_trace}
\alias{plot_trace}
\title{Plot trace plots to assess convergence
of a Bayesian Multilevel Hidden Markov Model}
\usage{
plot_trace(
  model,
  component = "gamma",
  param = NULL,
  level = "group",
  vrb = NULL,
  prob = TRUE,
  subject = NULL,
  state_labels = NULL,
  cat_labels = NULL,
  alpha = 1
)
}
\arguments{
\item{model}{Object or a list of objects of type `mHMMbayes::mHMM`
created using [mHMMbayes::mHMM()].}

\item{component}{Character string specifying the component to plot.
Takes "gamma" or "emiss".}

\item{param}{Optional character string specifying the parameter to plot
for the plotted component.
If `NULL` (default), plots the means (or probabilities).
Takes "var" for between-person variances,
"sd" for standard deviations of normal emission distributions,
and "beta" for regression coefficients.}

\item{level}{Character string specifying the level of parameter to plot.
Takes "group" or "subject".}

\item{vrb}{Optional character string specifying the variable to plot
when plotting categorical emission distributions.}

\item{prob}{Logical specifying whether trace plots of transitions
or categorical emissions should be plotted on the probability scale,
rather than the log scale.}

\item{subject}{Integer specifying the subject to plot
subject specific parameters for.}

\item{state_labels}{Optional character string specifying
labels to use for the states.}

\item{cat_labels}{Optional character string used to specify labels
for categories when plotting emission distributions of categorical variables.}

\item{alpha}{Numeric value specifying the transparency
of the lines in the plot. Default is 1.}
}
\value{
Object of type `ggplot2::gg`, plotting parameter distributions.
}
\description{
Plot trace plots to assess convergence
of a Bayesian Multilevel Hidden Markov Model
}
\examples{
\dontrun{
library(mHMMbayes)
# simulating multivariate continuous data
n_t <- 100
n <- 10
m <- 3
n_dep <- 2

gamma <- matrix(c(
  0.8, 0.1, 0.1,
  0.2, 0.7, 0.1,
  0.2, 0.2, 0.6
), ncol = m, byrow = TRUE)

emiss_distr <- list(
  matrix(c(
    50, 10,
    100, 10,
    150, 10
  ), nrow = m, byrow = TRUE),
  matrix(c(
    5, 2,
    10, 5,
    20, 3
  ), nrow = m, byrow = TRUE)
)

data_cont <- sim_mHMM(
  n_t = n_t, n = n, data_distr = "continuous",
  gen = list(m = m, n_dep = n_dep),
  gamma = gamma, emiss_distr = emiss_distr,
  var_gamma = .1, var_emiss = c(5^2, 0.2^2)
)

# Specify hyper-prior for the continuous emission distribution
manual_prior_emiss <- prior_emiss_cont(
  gen = list(m = m, n_dep = n_dep),
  emiss_mu0 = list(
    matrix(c(30, 70, 170), nrow = 1),
    matrix(c(7, 8, 18), nrow = 1)
  ),
  emiss_K0 = list(1, 1),
  emiss_V = list(rep(5^2, m), rep(0.5^2, m)),
  emiss_nu = list(1, 1),
  emiss_a0 = list(rep(1.5, m), rep(1, m)),
  emiss_b0 = list(rep(20, m), rep(4, m))
)

# Run the model on the simulated data:
# Note that for reasons of running time, J is set at a ridiculous low value.
# One would typically use a number of iterations J of at least 1000,
# and a burn_in of 200.
out_3st_cont_sim <- mHMM(
  s_data = data_cont$obs,
  data_distr = "continuous",
  gen = list(m = m, n_dep = n_dep),
  start_val = c(list(gamma), emiss_distr),
  emiss_hyp_prior = manual_prior_emiss,
  mcmc = list(J = 11, burn_in = 5)
)

plot_trace(
  model = out_3st_cont_sim,
  param = "gamma",
  level = "group",
  prob = TRUE
)
}
}
